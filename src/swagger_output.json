{
  "openapi": "3.0.3",
  "info": {
    "version": "v1.0.0",
    "title": "Beehive Backend API",
    "description": "API for managing books and authors, with JWT authentication. Built with Bun, Express, Prisma, and MongoDB.",
    "contact": {
      "name": "Orenji The Developer"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Development Server (v1)"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints for User Authentication (Registration, Login) and Profile Management"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user account",
        "description": "Allows a new user to register by providing email, password, and an optional name. Returns the created user object (password excluded) and a JWT token for immediate login.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully. Includes user data and JWT.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully. Please log in."
                    },
                    "data": {
                      "$ref": "#/components/schemas/AuthResponseData"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation error, email already exists).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in an existing user",
        "description": "Authenticates an existing user with their email and password. Returns the user object (password excluded) and a JWT token upon successful authentication.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully. Includes user data and JWT.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful."
                    },
                    "data": {
                      "$ref": "#/components/schemas/AuthResponseData"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g., invalid credentials).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get current authenticated user profile",
        "description": "Retrieves the profile information (excluding password) for the currently authenticated user. Requires a valid JWT to be passed in the Authorization header (Bearer scheme).",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserOutput"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Token missing, invalid, expired, or user not found).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT Bearer token: \"Bearer {token}\""
      }
    },
    "schemas": {
      "UserRegistrationInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 5,
            "maxLength": 254,
            "description": "User's email address.",
            "example": "test.user@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128,
            "description": "User password for registration. Must meet complexity requirements.",
            "example": "Str0ngP@ss!",
            "format": "password"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "Optional display name of the user.",
            "example": "Test User"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "description": "Data required for new user registration."
      },
      "AuthResponseData": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserOutput"
          },
          "token": {
            "type": "string",
            "description": "JWT authentication token for subsequent requests.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2..."
          }
        },
        "required": [
          "user",
          "token"
        ],
        "description": "Contains the authenticated user details and JWT token."
      },
      "UserOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "example": "60c72b2f9b1e8a5a4c8f0b1a",
            "format": "objectid"
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 5,
            "maxLength": 254,
            "description": "User's email address.",
            "example": "test.user@example.com"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "User's display name (if provided).",
            "example": "Test User"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp of user creation.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp of last user update.",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "email",
          "createdAt",
          "updatedAt"
        ],
        "description": "Represents a user object as returned by the API (password excluded)."
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "fail",
              "error"
            ],
            "example": "fail",
            "description": "'fail' for client errors (4xx), 'error' for server errors (5xx)."
          },
          "message": {
            "type": "string",
            "example": "Resource not found."
          },
          "reqId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique request identifier for tracing.",
            "example": "0b69f2f8-5fa3-4215-bb47-c7391760b91c"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "example": "body.password"
                },
                "message": {
                  "type": "string",
                  "example": "Password is too short."
                },
                "code": {
                  "type": "string",
                  "example": "too_small"
                }
              },
              "required": [
                "message"
              ],
              "description": "Details of a specific validation error."
            },
            "description": "Array of specific validation error details (if applicable)."
          }
        },
        "required": [
          "status",
          "message"
        ],
        "description": "Standardized error response structure."
      },
      "UserLoginInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 5,
            "maxLength": 254,
            "description": "User's email address.",
            "example": "test.user@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "description": "User password for login.",
            "example": "password123",
            "format": "password"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "description": "Credentials required for user login."
      }
    }
  }
}